#!/usr/bin/env python
# -*- coding: utf-8 -*-

'''trilegal - Waqas Bhatti (wbhatti@astro.princeton.edu) - Dec 2017
License: MIT. See the LICENSE file for more details.

This downloads and interacts with galaxy models generated by the TRILEGAL
webform.

Requires the requests package and can be used without astrobase if necessary.

'''
import os
import os.path
import pickle
import gzip
import glob
import hashlib

import logging
from datetime import datetime
from traceback import format_exc

import re

import numpy as np
import numpy.random as npr
# seed the numpy random generator
npr.seed(0xdecaff)

import scipy.stats as sps
import scipy.interpolate as spi

import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt

# to do the queries
import requests
import requests.exceptions

# to convert to/from galactic coords and read IPAC tables
from astropy.coordinates import SkyCoord
from astropy.table import Table

#############
## LOGGING ##
#############

# setup a logger
LOGGER = None

def set_logger_parent(parent_name):
    globals()['LOGGER'] = logging.getLogger('%s.trilegal' % parent_name)

def LOGDEBUG(message):
    if LOGGER:
        LOGGER.debug(message)
    elif DEBUG:
        print('%sZ [DBUG]: %s' % (datetime.utcnow().isoformat(), message))

def LOGINFO(message):
    if LOGGER:
        LOGGER.info(message)
    else:
        print('%sZ [INFO]: %s' % (datetime.utcnow().isoformat(), message))

def LOGERROR(message):
    if LOGGER:
        LOGGER.error(message)
    else:
        print('%sZ [ERR!]: %s' % (datetime.utcnow().isoformat(), message))

def LOGWARNING(message):
    if LOGGER:
        LOGGER.warning(message)
    else:
        print('%sZ [WRN!]: %s' % (datetime.utcnow().isoformat(), message))

def LOGEXCEPTION(message):
    if LOGGER:
        LOGGER.exception(message)
    else:
        print(
            '%sZ [EXC!]: %s\nexception was: %s' % (
                datetime.utcnow().isoformat(),
                message, format_exc()
            )
        )


############################
## TRILEGAL FORM SETTINGS ##
############################

# URL of the POST form target
TRILEGAL_URL = 'http://stev.oapd.inaf.it/cgi-bin/trilegal_{formversion}'

# these are the params that the user will probably interact with the most
TRILEGAL_INPUT_PARAMS = [
    'binary_kind',
    'extinction_infty',
    'extinction_sigma',
    'gc_b',
    'gc_l',
    'field',
    'icm_lim',
    'mag_lim',
    'photsys_file',
    'trilegal_version'
]

# these are taken from get_trilegal.pm, a Perl script from Prof. Leo Girardi
# a version of this is at T. D. Morton's VESPA github repository:
# https://github.com/timothydmorton/VESPA/blob/master/scripts/get_trilegal
TRILEGAL_DEFAULT_PARAMS = {
    'binary_frac': '0.3',
    'binary_kind': '${use_binaries}',
    'binary_mrinf': '0.7',
    'binary_mrsup': '1',
    'bulge_a': '1',
    'bulge_a0': '95',
    'bulge_am': '2500',
    'bulge_b': '-2.0e9',
    'bulge_csi': '0.31',
    'bulge_cutoffmass': '0.01',
    'bulge_eta': '0.68',
    'bulge_file': 'tab_sfr/file_sfr_bulge_zoccali_p03.dat',
    'bulge_kind': '2',
    'bulge_phi0': '15',
    'bulge_rho_central': '406.0',
    'eq_alpha': '0',
    'eq_delta': '0',
    'extinction_h_r': '100000',
    'extinction_h_z': '110',
    'extinction_infty': '${avextinction}',
    'extinction_kind': '2',
    'extinction_rho_sun': '0.00015',
    'extinction_sigma': '${sigmaav_av}',
    'field': '${area}',
    'gal_coord': '1',
    'gc_b': '${gal_b}',
    'gc_l': '${gal_l}',
    'halo_a': '1',
    'halo_b': '0',
    'halo_file': 'tab_sfr/file_sfr_halo.dat',
    'halo_kind': '2',
    'halo_q': '0.65',
    'halo_r_eff': '2800',
    'halo_rho_sun': '0.00015',
    'icm_lim': '${icmlim}',
    'imf_file': 'tab_imf/imf_chabrier_lognormal.dat',
    'mag_lim': '${maglim}',
    'mag_res': '0.1',
    'object_a': '1',
    'object_av': '1.504',
    'object_avkind': '1',
    'object_b': '0',
    'object_cutoffmass': '0.8',
    'object_dist': '1658',
    'object_file': 'tab_sfr/file_sfr_m4.dat',
    'object_kind': '0',
    'object_mass': '1280',
    'output_kind': '1',
    'photsys_file': 'tab_mag_odfnew/tab_mag_${system}.dat',
    'r_sun': '8700',
    'submit_form': 'Submit',
    'thickdisk_a': '1',
    'thickdisk_b': '0',
    'thickdisk_file': 'tab_sfr/file_sfr_thickdisk.dat',
    'thickdisk_h_r': '2800',
    'thickdisk_h_z': '800',
    'thickdisk_kind': '0',
    'thickdisk_r_max': '15000',
    'thickdisk_r_min': '0',
    'thickdisk_rho_sun': '0.0015',
    'thindisk_a': '0.8',
    'thindisk_b': '0',
    'thindisk_file': 'tab_sfr/file_sfr_thindisk_mod.dat',
    'thindisk_h_r': '2800',
    'thindisk_h_z0': '95',
    'thindisk_hz_alpha': '1.6666',
    'thindisk_hz_tau0': '4400000000',
    'thindisk_kind': '3',
    'thindisk_r_max': '15000',
    'thindisk_r_min': '0',
    'thindisk_rho_sun': '59',
    'trilegal_version': '${version}',
    'z_sun': '24.2'
}


# these were extracted from the TRILEGAL HTML form at:
# http://stev.oapd.inaf.it/cgi-bin/trilegal
TRILEGAL_FILTER_SYSTEMS = {
    '2mass': {
        'desc': '2MASS JHKs',
        'table': 'tab_mag_odfnew/tab_mag_2mass.dat'
    },
    '2mass_spitzer_wise': {
        'desc': '2MASS + Spitzer (IRAC+MIPS) + WISE',
        'table': 'tab_mag_odfnew/tab_mag_2mass_spitzer_wise.dat'
    },
    '2mass_spitzer_wise_washington_ddo51': {
        'desc': '2MASS+Spitzer+WISE+Washington+DDO51',
        'table': 'tab_mag_odfnew/tab_mag_2mass_spitzer_wise_washington_ddo51.dat'
    },
    'TESS_2mass_kepler': {
        'desc': ('TESS + 2MASS (Vegamags) + Kepler + SDSS griz + '
                 'DDO51 (in ABmags)'),
        'table': 'tab_mag_odfnew/tab_mag_TESS_2mass_kepler.dat'
    },
    'UVbright': {
        'desc': 'HST+GALEX+Swift/UVOT UV filters',
        'table': 'tab_mag_odfnew/tab_mag_UVbright.dat'
    },
    'acs_hrc': {
        'desc': 'HST/ACS HRC',
        'table': 'tab_mag_odfnew/tab_mag_acs_hrc.dat'
    },
    'acs_wfc': {
        'desc': 'HST/ACS WFC',
        'table': 'tab_mag_odfnew/tab_mag_acs_wfc.dat'
    },
    'akari': {
        'desc': 'AKARI',
        'table': 'tab_mag_odfnew/tab_mag_akari.dat'
    },
    'batc': {
        'desc': 'BATC',
        'table': 'tab_mag_odfnew/tab_mag_batc.dat'
    },
    'bessell': {
        'desc': 'UBVRIJHKLMN (cf. Bessell 1990 + Bessell & Brett 1988)',
        'table': 'tab_mag_odfnew/tab_mag_bessell.dat'
    },
    'ciber': {
        'desc': 'CIBER',
        'table': 'tab_mag_odfnew/tab_mag_ciber.dat'
    },
    'dcmc': {
        'desc': 'DCMC',
        'table': 'tab_mag_odfnew/tab_mag_dcmc.dat'
    },
    'decam': {
        'desc': 'DECAM (ABmags)',
        'table': 'tab_mag_odfnew/tab_mag_decam.dat'
    },
    'decam_vista': {
        'desc': 'DECAM ugrizY (ABmags) + VISTA ZYJHKs (Vegamags)',
        'table': 'tab_mag_odfnew/tab_mag_decam_vista.dat'
    },
    'denis': {
        'desc': 'DENIS',
        'table': 'tab_mag_odfnew/tab_mag_denis.dat'
    },
    'dmc14': {
        'desc': 'DMC 14 filters',
        'table': 'tab_mag_odfnew/tab_mag_dmc14.dat'
    },
    'dmc15': {
        'desc': 'DMC 15 filters',
        'table': 'tab_mag_odfnew/tab_mag_dmc15.dat'
    },
    'eis': {
        'desc': 'ESO/EIS (WFI UBVRIZ + SOFI JHK)',
        'table': 'tab_mag_odfnew/tab_mag_eis.dat'
    },
    'gaia': {
        'desc': "Gaia's G, G_BP and G_RP (Vegamags)",
        'table': 'tab_mag_odfnew/tab_mag_gaia.dat'
    },
    'galex': {
        'desc': "GALEX FUV+NUV (Vegamag) + Johnson's UBV",
        'table': 'tab_mag_odfnew/tab_mag_galex.dat'
    },
    'galex_sloan': {
        'desc': 'GALEX FUV+NUV + SDSS ugriz (all ABmags)',
        'table': 'tab_mag_odfnew/tab_mag_galex_sloan.dat'
    },
    'int_wfc': {
        'desc': 'INT/WFC (Vegamag)',
        'table': 'tab_mag_odfnew/tab_mag_int_wfc.dat'
    },
    'iphas': {
        'desc': 'IPHAS',
        'table': 'tab_mag_odfnew/tab_mag_iphas.dat'
    },
    'jwst_wide': {
        'desc': 'planned JWST wide filters',
        'table': 'tab_mag_odfnew/tab_mag_jwst_wide.dat'
    },
    'kepler': {
        'desc': 'Kepler + SDSS griz + DDO51 (in ABmags)',
        'table': 'tab_mag_odfnew/tab_mag_kepler.dat'
    },
    'kepler_2mass': {
        'desc': ('Kepler + SDSS griz + DDO51 (in ABmags) + 2MASS '
                 '(~Vegamag)'),
        'table': 'tab_mag_odfnew/tab_mag_kepler_2mass.dat'
    },
    'lbt_lbc': {
        'desc': 'LBT/LBC (Vegamag)',
        'table': 'tab_mag_odfnew/tab_mag_lbt_lbc.dat'
    },
    'lsst': {
        'desc': ('LSST ugrizY, March 2012 total filter throughputs (all '
                 'ABmags)'),
        'table': 'tab_mag_odfnew/tab_mag_lsst.dat'}
    ,
    'megacam': {
        'desc': "CFHT/Megacam u*g'r'i'z'",
        'table': 'tab_mag_odfnew/tab_mag_megacam.dat'
    },
    'megacam_wircam': {
        'desc': 'CFHT Megacam + Wircam (all ABmags)',
        'table': 'tab_mag_odfnew/tab_mag_megacam_wircam.dat'
    },
    'nicmosab': {
        'desc': 'HST/NICMOS AB',
        'table': 'tab_mag_odfnew/tab_mag_nicmosab.dat'
    },
    'nicmosst': {
        'desc': 'HST/NICMOS ST',
        'table': 'tab_mag_odfnew/tab_mag_nicmosst.dat'
    },
    'nicmosvega': {
        'desc': 'HST/NICMOS vega',
        'table': 'tab_mag_odfnew/tab_mag_nicmosvega.dat'
    },
    'noao_ctio_mosaic2': {
        'desc': 'NOAO/CTIO/MOSAIC2 (Vegamag)',
        'table': 'tab_mag_odfnew/tab_mag_noao_ctio_mosaic2.dat'
    },
    'ogle': {
        'desc': 'OGLE-II',
        'table': 'tab_mag_odfnew/tab_mag_ogle.dat'
    },
    'ogle_2mass_spitzer': {
        'desc': 'OGLE + 2MASS + Spitzer (IRAC+MIPS)',
        'table': 'tab_mag_odfnew/tab_mag_ogle_2mass_spitzer.dat'
    },
    'panstarrs1': {
        'desc': 'Pan-STARRS1',
        'table': 'tab_mag_odfnew/tab_mag_panstarrs1.dat'
    },
    'sloan': {
        'desc': 'SDSS ugriz',
        'table': 'tab_mag_odfnew/tab_mag_sloan.dat'
    },
    'sloan_2mass': {
        'desc': 'SDSS ugriz + 2MASS JHKs',
        'table': 'tab_mag_odfnew/tab_mag_sloan_2mass.dat'
    },
    'sloan_ukidss': {
        'desc': 'SDSS ugriz + UKIDSS ZYJHK',
        'table': 'tab_mag_odfnew/tab_mag_sloan_ukidss.dat'
    },
    'spitzer': {
        'desc': 'Spitzer IRAC+MIPS',
        'table': 'tab_mag_odfnew/tab_mag_spitzer.dat'
    },
    'stis': {
        'desc': 'HST/STIS imaging mode',
        'table': 'tab_mag_odfnew/tab_mag_stis.dat'
    },
    'stroemgren': {
        'desc': 'Stroemgren-Crawford',
        'table': 'tab_mag_odfnew/tab_mag_stroemgren.dat'
    },
    'suprimecam': {
        'desc': 'Subaru/Suprime-Cam (ABmags)',
        'table': 'tab_mag_odfnew/tab_mag_suprimecam.dat'
    },
    'swift_uvot': {
        'desc': 'SWIFT/UVOT UVW2, UVM2, UVW1,u (Vegamag)',
        'table': 'tab_mag_odfnew/tab_mag_swift_uvot.dat'
    },
    'tycho2': {
        'desc': 'Tycho VTBT',
        'table': 'tab_mag_odfnew/tab_mag_tycho2.dat'
    },
    'ubvrijhk': {
        'desc': 'UBVRIJHK (cf. Maiz-Apellaniz 2006 + Bessell 1990)',
        'table': 'tab_mag_odfnew/tab_mag_ubvrijhk.dat'
    },
    'ukidss': {
        'desc': 'UKIDSS ZYJHK (Vegamag)',
        'table': 'tab_mag_odfnew/tab_mag_ukidss.dat'
    },
    'vilnius': {
        'desc': 'Vilnius',
        'table': 'tab_mag_odfnew/tab_mag_vilnius.dat'
    },
    'visir': {
        'desc': 'VISIR',
        'table': 'tab_mag_odfnew/tab_mag_visir.dat'
    },
    'vista': {
        'desc': 'VISTA ZYJHKs (Vegamag)',
        'table': 'tab_mag_odfnew/tab_mag_vista.dat'
    },
    'vphas': {
        'desc': 'VPHAS+ (ABmags)',
        'table': 'tab_mag_odfnew/tab_mag_vphas.dat'
    },
    'vst_omegacam': {
        'desc': 'VST/OMEGACAM (ABmag)',
        'table': 'tab_mag_odfnew/tab_mag_vst_omegacam.dat'
    },
    'washington': {
        'desc': 'Washington CMT1T2',
        'table': 'tab_mag_odfnew/tab_mag_washington.dat'
    },
    'washington_ddo51': {
        'desc': 'Washington CMT1T2 + DDO51',
        'table': 'tab_mag_odfnew/tab_mag_washington_ddo51.dat'
    },
    'wfc3_medium': {
        'desc': ('HST/WFC3 medium filters (UVIS1+IR, final '
                 'throughputs)'),
        'table': 'tab_mag_odfnew/tab_mag_wfc3_medium.dat'
    },
    'wfc3_verywide': {
        'desc': ('HST/WFC3 long-pass and extremely wide filters '
                 '(UVIS1, final throughputs)'),
        'table': 'tab_mag_odfnew/tab_mag_wfc3_verywide.dat'
    },
    'wfc3_wide': {
        'desc': 'HST/WFC3 wide filters (UVIS1+IR, final throughputs)',
        'table': 'tab_mag_odfnew/tab_mag_wfc3_wide.dat'
    },
    'wfc3_wideverywide': {
        'desc': ('HST/WFC3 all W+LP+X filters (UVIS1+IR, final '
                 'throughputs)'),
        'table': 'tab_mag_odfnew/tab_mag_wfc3_wideverywide.dat'
    },
    'wfc3ir': {
        'desc': 'HST/WFC3 IR channel (final throughputs)',
        'table': 'tab_mag_odfnew/tab_mag_wfc3ir.dat'
    },
    'wfc3uvis1': {
        'desc': 'HST/WFC3 UVIS channel, chip 1 (final throughputs)',
        'table': 'tab_mag_odfnew/tab_mag_wfc3uvis1.dat'
    },
    'wfc3uvis2': {
        'desc': 'HST/WFC3 UVIS channel, chip 2 (final throughputs)',
        'table': 'tab_mag_odfnew/tab_mag_wfc3uvis2.dat'
    },
    'wfi': {
        'desc': 'ESO/WFI',
        'table': 'tab_mag_odfnew/tab_mag_wfi.dat'
    },
    'wfi2': {
        'desc': 'ESO/WFI2',
        'table': 'tab_mag_odfnew/tab_mag_wfi2.dat'
    },
    'wfi_sofi': {
        'desc': 'ESO/WFI+SOFI',
        'table': 'tab_mag_odfnew/tab_mag_wfi_sofi.dat'
    },
    'wfpc2': {
        'desc': 'HST/WFPC2 (Vegamag, cf. Holtzman et al. 1995)',
        'table': 'tab_mag_odfnew/tab_mag_wfpc2.dat'
    },
    'wircam': {
        'desc': 'CFHT Wircam',
        'table': 'tab_mag_odfnew/tab_mag_wircam.dat'
    }
}



##############################
## 2MASS DUST FORM SETTINGS ##
##############################

DUST_URL = 'https://irsa.ipac.caltech.edu/cgi-bin/DUST/nph-dust'

DUST_PARAMS = {'locstr':'',
               'regSize':'5.0'}

DUST_REGEX = re.compile(r'http[s|]://\S*extinction\.tbl')



################################
## 2MASS DUST QUERY FUNCTIONS ##
################################

def dust_extinction_query(ra, decl,
                          sizedeg=5.0,
                          forcefetch=False,
                          cachedir='~/.astrobase/dust-cache',
                          verbose=False,
                          timeout=10.0):
    '''
    This queries the 2MASS DUST service to find the extinction parameters
    for the given ra, decl.

    '''

    dustparams = DUST_PARAMS.copy()

    # convert the ra, decl to the required format
    # and generate the param dict
    locstr = '%.3f %.3f Equ J2000' % (ra, decl)
    dustparams['locstr'] = locstr
    dustparams['regSize'] = sizedeg

    # see if the cachedir exists
    if '~' in cachedir:
        cachedir = os.path.expanduser(cachedir)
    if not os.path.exists(cachedir):
        os.makedirs(cachedir)

    # generate the cachekey and cache filename
    cachekey = '%s - %.1f' % (locstr, sizedeg)
    cachekey = hashlib.sha256(cachekey.encode()).hexdigest()
    cachefname = os.path.join(cachedir, '%s.txt' % cachekey)
    provenance = 'cache'

    # if this does not exist in cache or if we're forcefetching, do the query
    if forcefetch or (not os.path.exists(cachefname)):

        provenance = 'new download'

        try:

            if verbose:
                LOGINFO('submitting 2MASS DUST request for '
                        'RA = %.3f, DEC = %.3f, size = %.1f' %
                        (ra, decl, sizedeg))

            req = requests.get(DUST_URL, dustparams, timeout=timeout)
            resp = req.text

            # see if we got an extinction table URL in the response
            tableurl = DUST_REGEX.search(resp)

            # if we did, download it to the cache directory
            if tableurl:

                tableurl = tableurl[0]

                req2 = requests.get(tableurl, timeout=timeout)

                # write the table to the cache directory
                with open(cachefname,'wb') as outfd:
                    outfd.write(req2.content)

                tablefname = cachefname

            else:
                LOGERROR('could not get extinction parameters for '
                         '(%.3f, %.3f) with size = %.1f' % (ra,decl,sizedeg))
                LOGERROR('error from DUST service follows:\n%s' % resp)
                return None

        except requests.exceptions.Timeout as e:
            LOGERROR('DUST request timed out for '
                     '(%.3f, %.3f) with size = %.1f' % (ra,decl,sizedeg))
            return None

        except Exception as e:
            LOGEXCEPTION('DUST request failed for '
                         '(%.3f, %.3f) with size = %.1f' % (ra,decl,sizedeg))
            return None

    # if this result is available in the cache, get it from there
    else:

        tablefname = cachefname

    #
    # now we should have the extinction table in some form
    #
    # read and parse the extinction table using astropy.Table
    extinction_table = Table.read(tablefname, format='ascii.ipac')

    filters = np.array(extinction_table['Filter_name'])
    a_sf11_byfilter = np.array(extinction_table['A_SandF'])
    a_sfd98_byfilter = np.array(extinction_table['A_SFD'])

    extdict = {'Amag':{x:{'sf11':y, 'sfd98':z} for
                       x,y,z in zip(filters,a_sf11_byfilter,a_sfd98_byfilter)},
               'table':np.array(extinction_table),
               'provenance':provenance,
               'cachekey':cachekey}

    return extdict
